{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QueryWeaver","text":"<p><code>QueryWeaver</code> is a simple and ligthweight SQL query builder written in python.</p> <p>It is (for now) a simple show-case and practice project for practising</p> <ul> <li>GitHub</li> <li>GitHub Actions</li> <li>Documentation with MkDocs on GitHub Pages</li> <li>CI/CD</li> <li>pre-commit hooks</li> <li>DevOps / package distribution</li> </ul> <p>Full code on GiHhub.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>pyyaml</li> <li>pandas</li> </ul>"},{"location":"example/","title":"Example","text":"<p>This examles work with a SQL sample database called <code>Chinook</code> that can be for example here.</p> <p>This database consists of the following tables:</p> <pre><code>---\nChinook Database\n---\nerDiagram\n    tracks {\n        TrackID INTEGER PK\n        Name NVARCHAR(200)\n        AlbumId INTEGER FK\n        MedaiTypeId INTEGER FK\n        GenreId INTEGER FK\n        Composer NVARCHAR(220)\n        Milliseconds INTEGER\n        Bytes INTEGER\n        UnitPrice NUMERIC\n    }\n    tracks ||--o{  media_types : \"\"\n    media_types {\n        MediaTypeId INTEGER PK\n        Name NVARCHAR(120)\n    }\n    genre |o--o{ tracks : \"\"\n    genre {\n        GenreID INTEGER PK\n        Name NVARCHAR(120)\n    }\n    playlist_track |o--|| tracks : \"\"\n    playlist_track {\n        PlaylistId INTEGER\n        TrackId INTEGER\n    }\n    playlist ||--o| playlist_track : \"\"\n    playlist {\n        PlaylistId INTEGER\n        Name NVARCHAR(120)\n    }\n    albums }o--|| artists : \"\"\n    albums |o--o{ tracks : \"\"\n    albums {\n        AlbumID INTEGER\n        Title NVARCHAR(160)\n        ArtistId INTEGER\n    }\n    artists {\n        ArtistId INTEGER\n        Name NVARCHAR(120)\n    }\n    invoice_items }o--|| tracks : \"\"\n    invoice_items {\n        InvoiceItemID INTEGER PK\n        InvoiceID INTEGER FK\n        TrackId INTEGER FK\n        UnitPrice NUMERIC\n        Quantity INTEGER\n    }\n    invoice ||--o{ invoice_items : \"\"\n    invoice {\n        InvoiceID INTEGER PK\n        CustomerId INTEGER FK\n        InvoiceDate DATETIME\n        BillingAddress NVARCHAR\n        BillingCity NVARCHAR\n    }\n    customers ||--o{ invoice : \"\"\n    customers {\n        CustomerID INTEGER PK\n        FirstName NVARCHAR(40)\n        LastName NVARCHAR(20)\n        Company NVARCHAR(20)\n        Address NVARCHAR(70)\n        City NVARCHAR(40)\n        State NVARCHAR(40)\n        Country NVARCHAR(40)\n        PostalCode NVARCHAR(10)\n        Phone NVARCHAR(24)\n        Fax NVARCHAR(24)\n        Email NVARCHAR(60)\n        SupportRepId INTEGER FK\n    }\n    employees |o--o{ customers : \"\"\n    employees }o--o| employees : \"\"\n    employees {\n        EmployeeId INTEGER PK\n        LastName NVARCHAR(20)\n        FirstName NVARCHAR(20)\n        Title NVARCHAR(30)\n        ReportsTo INTEGER FK\n        BirthDate DATETIME\n        HireDate DATETIME\n        Address NVARCHAR(70)\n    }\n</code></pre>"},{"location":"example/#basic-comparison-between-raw-sql-and-queryweavers-query","title":"Basic Comparison between Raw SQL and <code>QueryWeaver</code>'s Query","text":"<p>The following comparison shows a raw SQL query and a corresponding python query made with <code>QueryWeaver</code>:</p> Raw SQL QueryQueryWeaver <pre><code>SELECT\n    artists.ArtistId AS 'ID',\n    artists.Name AS 'Bandname',\n    COUNT(albums.AlbumId) AS '# Albums'\nFROM artists\nINNER JOIN albums\n    ON (artists.ArtistId = albums.ArtistId)\nGROUP BY artists.ArtistId\nHAVING (COUNT(albums.AlbumId) &gt;= 10)\nORDER BY COUNT(albums.AlbumId) DESC\nLIMIT 5\n</code></pre> <pre><code>from queryweaver import SQLQueryBuilder\n\nwith SQLQueryBuilder(\"examples/chinook.db\") as db:\n    albums = db.schema.albums\n    artists = db.schema.artists\n\n    query = (\n        db.select(\n            artists.ArtistId.alias(\"ID\"),\n            artists.Name.alias(\"Bandname\"),\n            albums.AlbumId.count().alias(\"# Albums\"),\n        )\n        .from_table(artists)\n        .join(albums, on=artists.ArtistId == albums.ArtistId)\n        .group_by(artists.ArtistId)\n        .having(albums.AlbumId.count() &gt;= 10)\n        .order_by(albums.AlbumId.count(), ascending=False)\n        .limit(5)\n    )\n\n    print(query.to_pandas())\n</code></pre>"},{"location":"example/#output","title":"Output","text":"ID Bandname # Albums 90 Iron Maiden 21 22 Led Zeppelin 14 58 Deep Purple 11 50 Metallica 10 150 U2 10"},{"location":"install/","title":"Install","text":""},{"location":"install/#install","title":"Install","text":"<p><code>QueryWeaver</code> uses uv for dependency mangament. It is as easy as</p> <pre><code>make install\n</code></pre> <p>to install the package locally in a virtual environment.</p>"}]}